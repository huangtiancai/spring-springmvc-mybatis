<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper映射文件:UserMapper.xml-->  
<mapper namespace="com.htc.dao.UserMapper">

	<!-- 
		1. resultType输出映射:指定输出的结果类型（pojo/简单数据类型…），将sql查询的结果映射成java对象
		   resultType注意：sql查询的列名和resultType指定的pojo的属性名相同，才能映射
		
		2. resultMap:手动的将列名和resultType指定的pojo的属性名做映射
	 -->
    
    <!-- 
    	定义一个resultMap
    	type:最终要映射的类型,大小写均可
    	id:resultMap唯一标识
     -->
     
    <resultMap type="User" id="userMap">
    	<!-- id要映射结果的唯一标识  称之为主键;result映射普通字段的  -->
    	<!-- column:结果集中的列名;property:type中指定的哪个属性名 -->
    	<id column="id_" property="id"/>
    	<result column="username_" property="username"/>
    	<result column="sex_" property="sex"/>
    </resultMap>
    
	<select id="findUserById" parameterType="int" resultMap="userMap">
		select id as id_,username as username_,sex as sex_,birthday,address from user where id=#{id}
	</select>
	
	<select id="findUserAll" parameterType="String" resultType="User">
		select * from user;
	</select>
	
	<!-- 使用包装类：需要在UserQueryVO类中封装User这个属性 -->
	<!-- private User user;          class UserQueryVO
		 private String username;    class User
		 #{user.username}
	-->
	<select id="findUserByName" parameterType="UserQueryVO" resultMap="userMap">
		select * from user where username like #{user.username}
	</select>
	
	
	<!-- 
		动态sql:mybatis重点是对sql的灵活解析和处理
		需求:定义条件查询用户列表/查询用户列表改为动态
	 -->
	<!-- 1.动态查询： select、where标签与sql语句整体在一起-->
	<select id="dynamicFind" parameterType="User" resultType="User">
		select * from user
		<where><!-- 标签相当于where关键字   作用：自动去除第一个and -->
			<if test="id!=null and id!=''">
				and id = #{id}
			</if>
			<if test="username!=null and username!=''">
				and username like #{username}
			</if>
			<if test="sex!=null and sex!=''">
				and sex = #{sex}
			</if>
			<if test="birthday!=null and birthday!=''">
				and birthday = #{birthday}
			</if>
			<if test="address!=null and address!=''">
				and address = #{address}
			</if>
		</where>
	</select>
	
	
	<!-- 2.动态查询： select、where标签与sql语句分离-->
	<!-- sql片段:通过sql片段 可以让sql语句重复使用， 常用的条件/常用的查询列 -->
	<sql id="userQuery">
		<if test="id!=null and id!=''">
			and id = #{id}
		</if>
		<if test="username!=null and username!=''">
			and username like #{username}
		</if>
		<if test="sex!=null and sex!=''">
			and sex = #{sex}
		</if>
		<if test="birthday!=null and birthday!=''">
			and birthday = #{birthday}
		</if>
		<if test="address!=null and address!=''">
			and address = #{address}
		</if>
	</sql>
	<!-- 引用sql片段 -->
	<select id="dynamicFind2" parameterType="User" resultType="User">\
		select * from user where 
		<where>
			<include refid="userQuery"></include>
		</where>
	</select>	

	
	<!--动态sql:foreach语句
		需求：我们需要查询 user 表中 id 分别为1,2,3的用户
		根据多个id 查询   (1,3,7) 
		select * from user where id in (1,2,3)
		select * from user where id=1 or id=2 or id=3
		动态 sql 语句的编写往往就是一个拼接的问题，为了保证拼接准确，我们最好首先要写原生的 sql 语句出来，然后在通过 mybatis 动态sql 对照着改，防止出错。
	--> 
	<!-- 
		private UserCustom userCustom;   class UserQueryVO
		private List<Integer> ids;       class UserCustom
		userCustom.ids
		
		collection:需要遍历的集合-指定输入对象中的集合属性
		item：将遍历的数据赋值的变量（自己定义）-每次遍历生成的对象
		open：拼接的开始-开始遍历时的拼接字符串
		close：拼接的结束-结束时拼接的字符串
		separator:遍历对象之间需要拼接的字符串
	 -->
	<!-- 用 foreach 来改写 select * from user where id in (1,2,3) 第一种写法 -->
	<select id="findUserByIds" parameterType="UserQueryVO" resultType="User">
		select * from user where id in
		<foreach collection="userCustom.ids" item="id" open="(" close=")"  separator=",">
			#{id}
		</foreach>
	</select>
	
	<!-- 用 foreach 来改写 select * from user where id in (1,2,3)第二种写法 -->
	<select id="findUserByIds2" parameterType="UserQueryVO" resultType="User">
		select * from user
		<where>
			<!--  select * from user where 1=1 and id in (1,2,3) -->
			<foreach collection="userCustom.ids" item="id" open="and id in(" close=")"  separator=",">
				#{id}
			</foreach>
		</where>	
	</select>
	
	<!-- 用 foreach 来改写 select * from user where id=1 or id=2 or id=3 -->
	<select id="findUserByIds3" parameterType="UserQueryVO" resultType="User">
		select * from user where
		<!--  select * from user where id=1 or id=2 or id=3 -->
		<foreach collection="userCustom.ids" item="id" open="(" close=")"  separator="or">
			#{id}
		</foreach>	
	</select>
	
	<!-- 用 foreach 来改写 select * from user where id=1 or id=2 or id=3 -->
	<select id="findUserByIds4" parameterType="UserQueryVO" resultType="User">
		select * from user
		<where>
			<!--  select * from user where id=1 or id=2 or id=3 -->
			<foreach collection="userCustom.ids" item="id" open="(" close=")"  separator="or">
				#{id}
			</foreach>
		</where>	
	</select>
	
	
	
	
</mapper>
